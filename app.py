import streamlit as st
import streamlit_authenticator as stauth
import yaml
import pandas as pd
import plotly.express as px
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
import joblib
from io import BytesIO
import numpy as np
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.lib import colors
from reportlab.platypus import Table, TableStyle
import os
from google.oauth2 import service_account
import gspread
import json  # ƒê·∫£m b·∫£o import json ƒë·ªÉ parse credentials_json

# L·∫•y th√¥ng tin t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
credentials_json = os.getenv("GOOGLE_APPLICATION_CREDENTIALS_JSON")

# TƒÉng gi·ªõi h·∫°n s·ªë √¥ t·ªëi ƒëa cho Pandas Styler
pd.set_option("styler.render.max_elements", 998336)

# C·∫•u h√¨nh trang
st.set_page_config(page_title="Ph√¢n t√≠ch H√†nh vi Mua s·∫Øm", layout="wide", page_icon="üìä", initial_sidebar_state="expanded")

# ƒê·ªçc file CSS
with open("styles.css", "r", encoding="utf-8") as f:
    css = f.read()
st.markdown(f"<style>{css}</style>", unsafe_allow_html=True)

# ƒê·ªçc file c·∫•u h√¨nh t√†i kho·∫£n
with open("credentials.yaml", "r") as file:
    config = yaml.safe_load(file)

# Kh·ªüi t·∫°o authenticator
authenticator = stauth.Authenticate(
    credentials=config['credentials'],
    cookie_name=config['cookie']['name'],
    cookie_key=config['cookie']['key'],
    cookie_expiry_days=config['cookie']['expiry_days']
)

# Giao di·ªán ƒëƒÉng nh·∫≠p
if st.session_state.get('authentication_status') is None or st.session_state.get('authentication_status') is False:
    st.markdown("""
        <div class="login-container">
            <div class="login-box">
                <div class="login-header">
                    <img src="https://img.icons8.com/fluency/96/analytics.png" alt="Logo">
                    <h2>H·ªá th·ªëng Ph√¢n t√≠ch</h2>
                    <p>ƒêƒÉng nh·∫≠p ƒë·ªÉ kh√°m ph√° d·ªØ li·ªáu mua s·∫Øm</p>
                </div>
    """, unsafe_allow_html=True)

    # Form ƒëƒÉng nh·∫≠p
    authentication_status = authenticator.login(
        fields={'Form name': '', 'Username': 'T√™n ng∆∞·ªùi d√πng', 'Password': 'M·∫≠t kh·∫©u', 'Login': 'ƒêƒÉng nh·∫≠p'},
        location='main'
    )

    # Th√¥ng b√°o tr·∫°ng th√°i
    if st.session_state.get('authentication_status') is False:
        st.markdown('<div class="error-message">Sai t√™n ng∆∞·ªùi d√πng ho·∫∑c m·∫≠t kh·∫©u!</div>', unsafe_allow_html=True)
    elif st.session_state.get('authentication_status') is None:
        st.markdown('<div class="warning-message">Vui l√≤ng nh·∫≠p th√¥ng tin ƒëƒÉng nh·∫≠p.</div>', unsafe_allow_html=True)

    st.markdown("""
            <div class="login-footer">
                ¬© 2025 KTDL-9 Team. All rights reserved.
            </div>
        </div>
    </div>
    """, unsafe_allow_html=True)

# N·∫øu ƒëƒÉng nh·∫≠p th√†nh c√¥ng
elif st.session_state.get('authentication_status'):
    name = st.session_state.get('name', 'Ng∆∞·ªùi d√πng')
    st.markdown(f'<div class="success-message">Ch√†o m·ª´ng {name}!</div>', unsafe_allow_html=True)
    authenticator.logout("ƒêƒÉng xu·∫•t", "sidebar")

   # T·∫£i d·ªØ li·ªáu (∆∞u ti√™n Google Sheets n·∫øu c√≥ credentials, n·∫øu kh√¥ng d√πng file CSV)
    @st.cache_data
    def load_data():
        if credentials_json:
            try:
                credentials_dict = json.loads(credentials_json)
                credentials = service_account.Credentials.from_service_account_info(credentials_dict)
                gc = gspread.authorize(credentials)
                sheet = gc.open("Purchase Data").sheet1  # Thay b·∫±ng t√™n Google Sheet c·ªßa b·∫°n n·∫øu d√πng
                raw_data = sheet.get_all_records()

                # L√†m s·∫°ch d·ªØ li·ªáu
                clean_data = []
                for row in raw_data:
                    clean_row = {}
                    for key, value in row.items():
                        if isinstance(value, str):
                            clean_row[key] = ''.join(char for char in value if ord(char) >= 32 or char in '\n\t\r')
                        else:
                            clean_row[key] = value
                    clean_data.append(clean_row)

                df = pd.DataFrame(clean_data)
                # ƒê·ªãnh d·∫°ng c√°c c·ªôt
                df['Purchase Date'] = pd.to_datetime(df['Purchase Date'])
                df['Product Price'] = df['Product Price'].astype(float)
                df['Quantity'] = df['Quantity'].astype(float)
                df['Total Purchase Amount'] = df['Total Purchase Amount'].astype(float)
                df['Customer ID'] = df['Customer ID'].astype(int)
                df['Returns'] = df['Returns'].astype(float)
                df['Age'] = df['Age'].astype(int)
                df['Gender'] = df['Gender'].astype(str)
                df['Payment Method'] = df['Payment Method'].astype(str)
                df['Customer Name'] = df['Customer Name'].astype(str)
                df['Churn'] = df['Churn'].astype(int)
                df['Year'] = df['Year'].astype(int)
                df['Month'] = df['Month'].astype(int)
                df['Day of Week'] = df['Day of Week'].astype(str)

                # T·∫£i customer_segments
                segment_sheet = gc.open("Customer Segments").sheet1
                raw_segment_data = segment_sheet.get_all_records()
                clean_segment_data = []
                for row in raw_segment_data:
                    clean_row = {}
                    for key, value in row.items():
                        if isinstance(value, str):
                            clean_row[key] = ''.join(char for char in value if ord(char) >= 32 or char in '\n\t\r')
                        else:
                            clean_row[key] = value
                    clean_segment_data.append(clean_row)
                customer_segments = pd.DataFrame(clean_segment_data)
            except Exception as e:
                print(f"L·ªói khi t·∫£i d·ªØ li·ªáu t·ª´ Google Sheets: {e}")
                st.info("S·ª≠ d·ª•ng file CSV c·ª•c b·ªô thay th·∫ø.")
                df = pd.read_csv("cleaned_customer_data.csv")
                df['Purchase Date'] = pd.to_datetime(df['Purchase Date'])
                df['Product Price'] = df['Product Price'].astype(float)
                df['Quantity'] = df['Quantity'].astype(float)
                df['Total Purchase Amount'] = df['Total Purchase Amount'].astype(float)
                df['Customer ID'] = df['Customer ID'].astype(int)
                df['Returns'] = df['Returns'].astype(float)
                df['Age'] = df['Age'].astype(int)
                df['Gender'] = df['Gender'].astype(str)
                df['Payment Method'] = df['Payment Method'].astype(str)
                df['Customer Name'] = df['Customer Name'].astype(str)
                df['Churn'] = df['Churn'].astype(int)
                df['Year'] = df['Year'].astype(int)
                df['Month'] = df['Month'].astype(int)
                df['Day of Week'] = df['Day of Week'].astype(str)
                customer_segments = pd.read_csv('customer_segments.csv')
        else:
            # D√πng file CSV c·ª•c b·ªô
            df = pd.read_csv("cleaned_customer_data.csv")
            df['Purchase Date'] = pd.to_datetime(df['Purchase Date'])
            df['Product Price'] = df['Product Price'].astype(float)
            df['Quantity'] = df['Quantity'].astype(float)
            df['Total Purchase Amount'] = df['Total Purchase Amount'].astype(float)
            df['Customer ID'] = df['Customer ID'].astype(int)
            df['Returns'] = df['Returns'].astype(float)
            df['Age'] = df['Age'].astype(int)
            df['Gender'] = df['Gender'].astype(str)
            df['Payment Method'] = df['Payment Method'].astype(str)
            df['Customer Name'] = df['Customer Name'].astype(str)
            df['Churn'] = df['Churn'].astype(int)
            df['Year'] = df['Year'].astype(int)
            df['Month'] = df['Month'].astype(int)
            df['Day of Week'] = df['Day of Week'].astype(str)
            customer_segments = pd.read_csv('customer_segments.csv')
        return df, customer_segments

    # T·∫£i m√¥ h√¨nh
    @st.cache_resource
    def load_models():
        try:
            churn_model = joblib.load('churn_model.pkl')
            scaler = joblib.load('scaler.pkl')
            revenue_model = joblib.load('revenue_model.pkl')
            return churn_model, scaler, revenue_model
        except Exception as e:
            st.error(f"L·ªói khi t·∫£i m√¥ h√¨nh: {e}")
            return None, None, None

    df, customer_segments = load_data()
    churn_model, scaler, revenue_model = load_models()

    # Ki·ªÉm tra n·∫øu m√¥ h√¨nh ho·∫∑c d·ªØ li·ªáu kh√¥ng t·∫£i ƒë∆∞·ª£c
    if not all([df is not None, customer_segments is not None, churn_model is not None, scaler is not None, revenue_model is not None]):
        st.error("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu ho·∫∑c m√¥ h√¨nh. Vui l√≤ng ki·ªÉm tra file ho·∫∑c c·∫•u h√¨nh.")
    else:
        # Header
        st.title("üìä H·ªá th·ªëng Ph√¢n t√≠ch H√†nh vi Mua s·∫Øm ")
        st.markdown("**Kh√°m ph√° d·ªØ li·ªáu, ph√¢n kh√∫c kh√°ch h√†ng v√† d·ª± ƒëo√°n v·ªõi giao di·ªán t·ªëi ∆∞u!**", unsafe_allow_html=True)

        # Sidebar
        with st.sidebar:
            st.header("üîç B·ªô l·ªçc D·ªØ li·ªáu")
            category_filter = st.multiselect("Danh m·ª•c s·∫£n ph·∫©m", options=['T·∫•t c·∫£'] + sorted(df['Product Category'].unique()), default=['T·∫•t c·∫£'])
            gender_filter = st.multiselect("Gi·ªõi t√≠nh", options=['T·∫•t c·∫£'] + sorted(df['Gender'].unique()), default=['T·∫•t c·∫£'])
            payment_filter = st.multiselect("Ph∆∞∆°ng th·ª©c thanh to√°n", options=['T·∫•t c·∫£'] + sorted(df['Payment Method'].unique()), default=['T·∫•t c·∫£'])
            date_range = st.date_input("Ph·∫°m vi ng√†y", value=(df['Purchase Date'].min(), df['Purchase Date'].max()), 
                               min_value=df['Purchase Date'].min(), max_value=df['Purchase Date'].max())
            st.markdown("---")
            st.caption(f"C·∫≠p nh·∫≠t l·∫ßn cu·ªëi: {pd.Timestamp.now().strftime('%d/%m/%Y')}")

        # L·ªçc d·ªØ li·ªáu
        filtered_df = df.copy()
        if 'T·∫•t c·∫£' not in category_filter:
            filtered_df = filtered_df[filtered_df['Product Category'].isin(category_filter)]
        if 'T·∫•t c·∫£' not in gender_filter:
            filtered_df = filtered_df[filtered_df['Gender'].isin(gender_filter)]
        if 'T·∫•t c·∫£' not in payment_filter:
            filtered_df = filtered_df[filtered_df['Payment Method'].isin(payment_filter)]
            filtered_df = filtered_df[(filtered_df['Purchase Date'] >= pd.to_datetime(date_range[0])) & 
                          (filtered_df['Purchase Date'] <= pd.to_datetime(date_range[1]))]

        # T·ªïng quan
        st.write(f"**T·ªïng quan d·ªØ li·ªáu l·ªçc**: {len(filtered_df):,} giao d·ªãch | T·ªïng doanh thu: {filtered_df['Total Purchase Amount'].sum():,.0f} $")

        # Tabs
        tabs = st.tabs(["üìà Ph√¢n t√≠ch C∆° b·∫£n", "üë• Ph√¢n kh√∫c Kh√°ch h√†ng", "‚ö†Ô∏è D·ª± ƒëo√°n Churn", "üìÖ Xu h∆∞·ªõng Th·ªùi gian", 
                        "üë§ Chi ti·∫øt Kh√°ch h√†ng", "üì¶ Ph√¢n t√≠ch Ho√†n tr·∫£"])

        # Tab 1: Ph√¢n t√≠ch C∆° b·∫£n
        with tabs[0]:
            st.subheader("Ph√¢n t√≠ch C∆° b·∫£n")
            col1, col2, col3, col4 = st.columns([1, 1, 1, 1], gap="small")

            with col1:
                revenue_by_category = filtered_df.groupby('Product Category')['Total Purchase Amount'].sum().reset_index()
                fig1 = px.bar(revenue_by_category, x='Product Category', y='Total Purchase Amount', 
                      title="Doanh thu theo Danh m·ª•c", color='Product Category', text_auto='.2s', height=400)
                fig1.update_traces(textposition='outside')
                st.plotly_chart(fig1, use_container_width=True, key="chart_revenue_by_category")

            with col2:
                revenue_by_day = filtered_df.groupby(filtered_df['Purchase Date'].dt.date)['Total Purchase Amount'].sum().reset_index()
                fig2 = px.line(revenue_by_day, x='Purchase Date', y='Total Purchase Amount', 
                       title="Doanh thu Theo Ng√†y", height=400, line_shape='spline')
                st.plotly_chart(fig2, use_container_width=True, key="chart_revenue_by_day")

            with col3:
                top_spenders = filtered_df.groupby(['Customer ID', 'Customer Name']).agg({
                    'Total Purchase Amount': 'sum',
                    'Purchase Date': 'count',
                    'Product Category': lambda x: x.mode()[0]
                }).nlargest(5, 'Total Purchase Amount').reset_index()
                top_spenders.columns = ['Customer ID', 'Customer Name', 'Total Purchase Amount', 'Transaction Count', 'Favorite Category']
                fig3 = px.bar(top_spenders, x='Customer Name', y='Total Purchase Amount', 
                      title="Top 5 Kh√°ch h√†ng Chi ti√™u Cao nh·∫•t", 
                      text=top_spenders['Customer Name'] + ' (' + top_spenders['Transaction Count'].astype(str) + ' GD)',
                      color_discrete_sequence=['#ff6f61'], height=400)
                fig3.update_traces(textposition='outside')
                st.plotly_chart(fig3, use_container_width=True, key="chart_top_spenders")

            with col4:
                revenue_by_payment = filtered_df.groupby('Payment Method')['Total Purchase Amount'].sum().reset_index()
                fig4 = px.pie(revenue_by_payment, values='Total Purchase Amount', names='Payment Method',
                      title="Doanh thu theo Ph∆∞∆°ng th·ª©c Thanh to√°n", height=400)
                st.plotly_chart(fig4, use_container_width=True, key="chart_revenue_by_payment")

            # B·∫£ng chi ti·∫øt Top 5 Kh√°ch h√†ng
            st.subheader("Chi ti·∫øt Top 5 Kh√°ch h√†ng")
            st.dataframe(top_spenders.style.format({
                'Total Purchase Amount': '{:,.0f} $',
                'Transaction Count': '{:,}',
            }), height=200, use_container_width=True)
        
            # Ph√¢n t√≠ch chi ti·∫øt danh m·ª•c theo ng√†y
            st.subheader("Chi ti·∫øt Danh m·ª•c Theo Ng√†y")
            selected_category = st.selectbox("Ch·ªçn danh m·ª•c ƒë·ªÉ xem chi ti·∫øt:", 
                                          options=['T·∫•t c·∫£'] + sorted(filtered_df['Product Category'].unique()),
                                          index=0)
        
            if selected_category == 'T·∫•t c·∫£':
                category_by_day = filtered_df.groupby(filtered_df['Purchase Date'].dt.date)['Total Purchase Amount'].sum().reset_index()
            else:
                category_by_day = filtered_df[filtered_df['Product Category'] == selected_category].groupby(filtered_df['Purchase Date'].dt.date)['Total Purchase Amount'].sum().reset_index()
        
            fig_category_day = px.line(category_by_day, x='Purchase Date', y='Total Purchase Amount', 
                                    title=f"Doanh thu Theo Ng√†y c·ªßa {'T·∫•t c·∫£ Danh m·ª•c' if selected_category == 'T·∫•t c·∫£' else selected_category}", 
                                    height=400, line_shape='spline')
            st.plotly_chart(fig_category_day, use_container_width=True, key="chart_category_by_day")
        
            with st.expander(f"üîé Xem d·ªØ li·ªáu chi ti·∫øt c·ªßa {'T·∫•t c·∫£ Danh m·ª•c' if selected_category == 'T·∫•t c·∫£' else selected_category}", expanded=False):
                if selected_category == 'T·∫•t c·∫£':
                    detailed_data = filtered_df.groupby(['Purchase Date', 'Product Category'])['Total Purchase Amount'].sum().unstack().fillna(0)
                    limited_data = detailed_data.head(50)
                    st.write(f"**Hi·ªÉn th·ªã 50 ng√†y ƒë·∫ßu ti√™n (t·ªïng s·ªë ng√†y: {len(detailed_data)})**")
                    st.dataframe(limited_data.style.format('{:,.0f} $'), height=400, use_container_width=True)
                else:
                    detailed_data = filtered_df[filtered_df['Product Category'] == selected_category].groupby('Purchase Date')['Total Purchase Amount'].sum().reset_index()
                    st.dataframe(detailed_data.style.format('{:,.0f} $'), height=400, use_container_width=True)
        
            st.subheader("G·ª£i √Ω H√†nh ƒë·ªông")
            low_transaction_day = filtered_df.groupby('Day of Week')['Customer ID'].count().idxmin()
            low_day_revenue = filtered_df.groupby('Day of Week')['Total Purchase Amount'].sum().min()
            st.write(f"- TƒÉng khuy·∫øn m√£i 15% v√†o {low_transaction_day} (doanh thu th·∫•p nh·∫•t: {low_day_revenue:,.0f} $) qua email ho·∫∑c SMS.")
        
            top_category = filtered_df.groupby('Product Category')['Total Purchase Amount'].sum().idxmax()
            top_category_revenue = filtered_df.groupby('Product Category')['Total Purchase Amount'].sum().max()
            st.write(f"- ƒê·∫©y m·∫°nh qu·∫£ng b√° {top_category} (doanh thu: {top_category_revenue:,.0f} $) qua m·∫°ng x√£ h·ªôi v√† banner tr√™n website.")
        
            st.write("- **Chi·∫øn l∆∞·ª£c cho Top Kh√°ch h√†ng:**")
            for vip in top_spenders['Customer ID']:
                vip_data = filtered_df[filtered_df['Customer ID'] == vip]
                last_purchase = vip_data['Purchase Date'].max()
                fav_category = vip_data['Product Category'].mode()[0]
                if (pd.Timestamp.now() - last_purchase).days > 30:
                    st.write(f"  - Kh√°ch h√†ng {vip}: Kh√¥ng ho·∫°t ƒë·ªông {(pd.Timestamp.now() - last_purchase).days} ng√†y. G·ª≠i ∆∞u ƒë√£i 20% cho {fav_category}.")
                else:
                    st.write(f"  - Kh√°ch h√†ng {vip}: Duy tr√¨ ho·∫°t ƒë·ªông. T·∫∑ng ƒëi·ªÉm th∆∞·ªüng ho·∫∑c gi·∫£m gi√° 10% cho {fav_category} ƒë·ªÉ khuy·∫øn kh√≠ch mua ti·∫øp.")

        # Tab 2: Ph√¢n kh√∫c Kh√°ch h√†ng
        with tabs[1]:
            st.subheader("Ph√¢n kh√∫c Kh√°ch h√†ng")

            with st.expander("üîé Chi ti·∫øt c√°c nh√≥m kh√°ch h√†ng", expanded=False):
                cluster_summary = customer_segments.groupby('Cluster').agg({
                    'Total Purchase Amount': 'mean',
                    'Transaction Count': 'mean',
                    'Returns': 'mean',
                    'Age': 'mean',
                    'Customer ID': 'count'
                }).rename(columns={
                    'Total Purchase Amount': 'Chi ti√™u TB ($)',
                    'Transaction Count': 'T·∫ßn su·∫•t GD TB',
                    'Returns': 'T·ª∑ l·ªá Ho√†n tr·∫£ TB',
                    'Age': 'ƒê·ªô tu·ªïi TB',
                    'Customer ID': 'S·ªë l∆∞·ª£ng KH'
                })
                st.dataframe(cluster_summary.style.format({
                    'Chi ti√™u TB ($)': '{:,.0f}',
                    'T·∫ßn su·∫•t GD TB': '{:.2f}',
                    'T·ª∑ l·ªá Ho√†n tr·∫£ TB': '{:.2%}',
                    'ƒê·ªô tu·ªïi TB': '{:.1f}',
                    'S·ªë l∆∞·ª£ng KH': '{:,}'
                }).background_gradient(cmap='Blues'))

            avg_spending = customer_segments.groupby('Cluster')['Total Purchase Amount'].mean().reset_index()
            fig4 = px.bar(avg_spending, x='Cluster', y='Total Purchase Amount', 
                        title="Chi ti√™u Trung b√¨nh theo Nh√≥m", color='Cluster', 
                        text=avg_spending['Total Purchase Amount'].round(2), height=400)
            fig4.update_traces(textposition='outside')
            st.plotly_chart(fig4, use_container_width=True, key="chart_avg_spending")

            cluster_compare = customer_segments.groupby('Cluster').agg({
                'Total Purchase Amount': 'mean',
                'Returns': 'mean'
            }).reset_index()
            cluster_compare['Returns'] = cluster_compare['Returns'] * 100
            fig_compare = px.scatter(cluster_compare, x='Total Purchase Amount', y='Returns', 
                                 color='Cluster', size='Total Purchase Amount',
                                 title="So s√°nh Chi ti√™u TB v√† T·ª∑ l·ªá Ho√†n tr·∫£",
                                 labels={'Total Purchase Amount': 'Chi ti√™u TB ($)', 'Returns': 'T·ª∑ l·ªá Ho√†n tr·∫£ (%)'},
                                 height=400)
            st.plotly_chart(fig_compare, use_container_width=True, key="chart_cluster_compare")

            df_with_clusters = filtered_df.merge(customer_segments[['Customer ID', 'Cluster']], on='Customer ID', how='left')
            cluster_trends = df_with_clusters.groupby(['Cluster', df_with_clusters['Purchase Date'].dt.to_period('M')])['Total Purchase Amount'].sum().reset_index()
            cluster_trends['Purchase Date'] = cluster_trends['Purchase Date'].astype(str)
            fig_trends = px.line(cluster_trends, x='Purchase Date', y='Total Purchase Amount', color='Cluster',
                              title="Xu h∆∞·ªõng Chi ti√™u Theo Th√°ng c·ªßa C√°c Nh√≥m", height=400, line_shape='spline')
            st.plotly_chart(fig_trends, use_container_width=True, key="chart_cluster_trends")

            st.subheader("G·ª£i √Ω H√†nh ƒë·ªông Theo Nh√≥m")
            for cluster in cluster_summary.index:
                spending = cluster_summary.loc[cluster, 'Chi ti√™u TB ($)']
                frequency = cluster_summary.loc[cluster, 'T·∫ßn su·∫•t GD TB']
                returns = cluster_summary.loc[cluster, 'T·ª∑ l·ªá Ho√†n tr·∫£ TB']
                st.write(f"**Nh√≥m {cluster}:**")
                if spending > cluster_summary['Chi ti√™u TB ($)'].mean() and frequency < cluster_summary['T·∫ßn su·∫•t GD TB'].mean():
                    st.write(f"- Chi ti√™u cao nh∆∞ng √≠t giao d·ªãch: T·∫∑ng m√£ gi·∫£m gi√° ƒë·ªãnh k·ª≥ ƒë·ªÉ tƒÉng t·∫ßn su·∫•t mua s·∫Øm.")
                elif returns > cluster_summary['T·ª∑ l·ªá Ho√†n tr·∫£ TB'].mean():
                    st.write(f"- T·ª∑ l·ªá ho√†n tr·∫£ cao: C·∫£i thi·ªán ch·∫•t l∆∞·ª£ng s·∫£n ph·∫©m ho·∫∑c ki·ªÉm tra ch√≠nh s√°ch ƒë·ªïi tr·∫£.")
                else:
                    st.write(f"- Nh√≥m ·ªïn ƒë·ªãnh: Duy tr√¨ ch√≠nh s√°ch hi·ªán t·∫°i ho·∫∑c th·ª≠ nghi·ªám ∆∞u ƒë√£i nh·ªè.")

            selected_cluster = st.selectbox("Ch·ªçn nh√≥m ƒë·ªÉ xem chi ti·∫øt:", options=cluster_summary.index)
            cluster_data = customer_segments[customer_segments['Cluster'] == selected_cluster]
            st.write(f"**Th√¥ng tin chi ti·∫øt Nh√≥m {selected_cluster}:**")
            st.dataframe(cluster_data[['Customer ID', 'Total Purchase Amount', 'Transaction Count', 'Returns', 'Age']])
            cluster_purchases = filtered_df[filtered_df['Customer ID'].isin(cluster_data['Customer ID'])]
            fav_categories = cluster_purchases.groupby('Product Category')['Total Purchase Amount'].sum().reset_index()
            fig_fav = px.pie(fav_categories, values='Total Purchase Amount', names='Product Category',
                          title=f"Danh m·ª•c Y√™u th√≠ch c·ªßa Nh√≥m {selected_cluster}", height=400)
            st.plotly_chart(fig_fav, use_container_width=True, key="chart_fav_categories")

            st.subheader("Ph√¢n t√≠ch Theo Gi·ªõi t√≠nh")
            gender_spending = filtered_df.groupby('Gender')['Total Purchase Amount'].mean().reset_index()
            fig_gender = px.bar(gender_spending, x='Gender', y='Total Purchase Amount', 
                        title="Chi ti√™u Trung b√¨nh theo Gi·ªõi t√≠nh", color='Gender', 
                        text=gender_spending['Total Purchase Amount'].round(2), height=400)
            fig_gender.update_traces(textposition='outside')
            st.plotly_chart(fig_gender, use_container_width=True, key="chart_gender_spending")

        # Tab 3: D·ª± ƒëo√°n Churn
        with tabs[2]:
            st.subheader("D·ª± ƒëo√°n Kh√°ch h√†ng R·ªùi b·ªè")

            col1, col2 = st.columns([3, 1], vertical_alignment="center")
            with col1:
                customer_id = st.number_input("Nh·∫≠p Customer ID:", min_value=1, step=1, format="%d", key="customer_id_input")
            with col2:
                predict_button = st.button("D·ª± ƒëo√°n", key="predict_button", use_container_width=True)
        
            if predict_button:
                customer_data = customer_segments[customer_segments['Customer ID'] == customer_id]
                if not customer_data.empty:
                    X = scaler.transform(customer_data[['Total Purchase Amount', 'Transaction Count', 'Returns', 'Age']])
                    churn_pred = churn_model.predict(X)[0]
                    if hasattr(churn_model, 'predict_proba'):
                        churn_prob = churn_model.predict_proba(X)[0][1] * 100
                        st.success(f"Kh√°ch h√†ng {customer_id} {'c√≥ nguy c∆° r·ªùi b·ªè' if churn_pred else 'kh√¥ng r·ªùi b·ªè'} (X√°c su·∫•t: {churn_prob:.2f}%)", icon="‚úÖ")
                    else:
                        st.success(f"Kh√°ch h√†ng {customer_id} {'c√≥ nguy c∆° r·ªùi b·ªè' if churn_pred else 'kh√¥ng r·ªùi b·ªè'}", icon="‚úÖ")
                
                    if churn_pred:
                        st.write("**Nguy√™n nh√¢n ti·ªÅm nƒÉng:**")
                        if customer_data['Transaction Count'].iloc[0] < customer_segments['Transaction Count'].mean():
                            st.write("- T·∫ßn su·∫•t giao d·ªãch th·∫•p h∆°n trung b√¨nh.")
                        if customer_data['Returns'].iloc[0] > customer_segments['Returns'].mean():
                            st.write("- T·ª∑ l·ªá ho√†n tr·∫£ cao h∆°n trung b√¨nh.")
                        if customer_data['Total Purchase Amount'].iloc[0] < customer_segments['Total Purchase Amount'].mean():
                            st.write("- Chi ti√™u th·∫•p h∆°n trung b√¨nh.")
                    
                        customer_filtered = filtered_df[filtered_df['Customer ID'] == customer_id]
                        last_purchase = customer_filtered['Purchase Date'].max()
                        fav_category = customer_filtered['Product Category'].mode()[0]
                        days_inactive = (pd.Timestamp.now() - last_purchase).days
                        avg_spending = customer_data['Total Purchase Amount'].mean()
                        potential_loss = avg_spending * 12
                
                        st.write(f"**Doanh thu ti·ªÅm nƒÉng b·ªã m·∫•t**: {potential_loss:,.0f} $ (∆∞·ªõc t√≠nh trong 12 th√°ng).")
                        st.write("**G·ª£i √Ω chi ti·∫øt:**")
                        if days_inactive > 30:
                            st.write(f"- Kh√°ch h√†ng kh√¥ng mua {days_inactive} ng√†y. G·ª≠i email ∆∞u ƒë√£i 20% cho {fav_category}.")
                        else:
                            st.write(f"- T·∫∑ng m√£ gi·∫£m gi√° 10% cho {fav_category} ƒë·ªÉ khuy·∫øn kh√≠ch giao d·ªãch ti·∫øp theo.")
                else:
                    st.error(f"Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng {customer_id}!", icon="‚ùå")

                st.markdown("---")
                st.write("**Top 10 Kh√°ch h√†ng c√≥ nguy c∆° r·ªùi b·ªè cao nh·∫•t**")
                X_all = scaler.transform(customer_segments[['Total Purchase Amount', 'Transaction Count', 'Returns', 'Age']])
                if hasattr(churn_model, 'predict_proba'):
                    churn_probs = churn_model.predict_proba(X_all)[:, 1]
                    customer_segments['Churn Probability'] = churn_probs * 100
                    top_churn = customer_segments.sort_values('Churn Probability', ascending=False).head(10)
                    st.dataframe(top_churn[['Customer ID', 'Total Purchase Amount', 'Transaction Count', 'Returns', 'Age', 'Churn Probability']]
                             .style.format({'Churn Probability': '{:.2f}%', 'Total Purchase Amount': '{:,.0f}'}), height=300)
                else:
                    churn_preds = churn_model.predict(X_all)
                    customer_segments['Churn Prediction'] = churn_preds
                    top_churn = customer_segments[customer_segments['Churn Prediction'] == 1].head(10)
                    st.dataframe(top_churn[['Customer ID', 'Total Purchase Amount', 'Transaction Count', 'Returns', 'Age']], height=300)

                st.markdown("---")
                st.write("**Xu h∆∞·ªõng Nguy c∆° Churn Theo Th·ªùi gian**")
                df_with_churn = filtered_df.merge(customer_segments[['Customer ID', 'Churn Probability']], on='Customer ID', how='left')
                churn_trend = df_with_churn.groupby(df_with_churn['Purchase Date'].dt.to_period('M'))['Churn Probability'].mean().reset_index()
                churn_trend['Purchase Date'] = churn_trend['Purchase Date'].astype(str)
                fig_churn_trend = px.line(churn_trend, x='Purchase Date', y='Churn Probability', 
                                      title="Nguy c∆° Churn Trung b√¨nh Theo Th√°ng", height=400, line_shape='spline')
                st.plotly_chart(fig_churn_trend, use_container_width=True, key="chart_churn_trend")

                st.markdown("---")
                st.write("**Nguy c∆° Churn Theo Ph√¢n kh√∫c Kh√°ch h√†ng**")
                churn_by_cluster = customer_segments.groupby('Cluster')['Churn Probability'].mean().reset_index()
                fig_churn_cluster = px.bar(churn_by_cluster, x='Cluster', y='Churn Probability', 
                                       title="Nguy c∆° Churn Trung b√¨nh Theo Nh√≥m", color='Cluster',
                                       text=churn_by_cluster['Churn Probability'].apply(lambda x: f"{x:.2f}%"), height=400)
                fig_churn_cluster.update_traces(textposition='outside')
                st.plotly_chart(fig_churn_cluster, use_container_width=True, key="chart_churn_by_cluster")

        # Tab 4: Xu h∆∞·ªõng Th·ªùi gian
        with tabs[3]:
            st.subheader("Xu h∆∞·ªõng Theo Th·ªùi gian")

            if 'Purchase Date' in filtered_df.columns and filtered_df['Purchase Date'].dt.hour.notnull().any():
                hourly_trends = filtered_df.groupby(filtered_df['Purchase Date'].dt.hour)['Total Purchase Amount'].sum().reset_index()
                hourly_trends.columns = ['Hour', 'Total Purchase Amount']
                fig_hourly = px.bar(hourly_trends, x='Hour', y='Total Purchase Amount', 
                                title="Doanh thu Theo Gi·ªù trong Ng√†y", 
                                text=hourly_trends['Total Purchase Amount'].apply(lambda x: f"{x:,.0f}"), 
                                height=400)
                fig_hourly.update_traces(textposition='outside')
                st.plotly_chart(fig_hourly, use_container_width=True, key="chart_hourly_trends")
            else:
                st.warning("D·ªØ li·ªáu kh√¥ng ch·ª©a th√¥ng tin gi·ªù chi ti·∫øt ƒë·ªÉ ph√¢n t√≠ch theo gi·ªù.")

            monthly_revenue = filtered_df.groupby(filtered_df['Purchase Date'].dt.to_period('M'))['Total Purchase Amount'].sum().reset_index()
            monthly_revenue['Month_Num'] = np.arange(len(monthly_revenue))
            monthly_revenue['Purchase Date'] = monthly_revenue['Purchase Date'].astype(str)
            fig5 = px.line(monthly_revenue, x='Purchase Date', y='Total Purchase Amount', 
                        title="Doanh thu Theo Th√°ng", height=400, line_shape='spline')
            st.plotly_chart(fig5, use_container_width=True, key="chart_monthly_revenue")

            quarterly_trends = filtered_df.groupby(filtered_df['Purchase Date'].dt.to_period('Q'))['Total Purchase Amount'].sum().reset_index()
            quarterly_trends['Purchase Date'] = quarterly_trends['Purchase Date'].astype(str)
            fig_quarterly = px.bar(quarterly_trends, x='Purchase Date', y='Total Purchase Amount', 
                                title="Doanh thu Theo Qu√Ω", 
                                text=quarterly_trends['Total Purchase Amount'].apply(lambda x: f"{x:,.0f}"), 
                                height=400)
            fig_quarterly.update_traces(textposition='outside')
            st.plotly_chart(fig_quarterly, use_container_width=True, key="chart_quarterly_trends")

        # Tab 5: Chi ti·∫øt Kh√°ch h√†ng
        with tabs[4]:
            st.subheader("Chi ti·∫øt Kh√°ch h√†ng")
            customer_id = st.number_input("Nh·∫≠p Customer ID ƒë·ªÉ xem chi ti·∫øt:", min_value=1, step=1)
            customer_data = filtered_df[filtered_df['Customer ID'] == customer_id]
            if not customer_data.empty:
                st.write(f"**T√™n kh√°ch h√†ng**: {customer_data['Customer Name'].iloc[0]}")
                st.write(f"**Gi·ªõi t√≠nh**: {customer_data['Gender'].iloc[0]}")
                st.write(f"**T·ªïng chi ti√™u**: {customer_data['Total Purchase Amount'].sum():,.0f} $")
                st.dataframe(customer_data[['Purchase Date', 'Product Category', 'Product Price', 'Quantity', 
                                   'Total Purchase Amount', 'Payment Method', 'Returns']])
                fig = px.line(customer_data, x='Purchase Date', y='Total Purchase Amount', 
                      title=f"L·ªãch s·ª≠ mua s·∫Øm c·ªßa {customer_data['Customer Name'].iloc[0]} (ID: {customer_id})", height=400)
                st.plotly_chart(fig, use_container_width=True, key="chart_customer_history")
            else:
                st.warning("Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng n√†y!")

        # Tab 6: Ph√¢n t√≠ch Ho√†n tr·∫£
        with tabs[5]:
            st.subheader("Ph√¢n t√≠ch Ho√†n tr·∫£")
            return_rate = filtered_df.groupby('Product Category')['Returns'].mean().reset_index()
            fig6 = px.bar(return_rate, x='Product Category', y='Returns', 
                        title="T·ª∑ l·ªá Ho√†n tr·∫£ theo Danh m·ª•c", text_auto='.2%', height=400)
            fig6.update_traces(textposition='outside')
            st.plotly_chart(fig6, use_container_width=True, key="chart_return_rate_1")

            # X√≥a ho·∫∑c s·ª≠a bi·ªÉu ƒë·ªì tr√πng l·∫∑p th·ª© hai
            return_vs_revenue = filtered_df.groupby('Product Category').agg({'Returns': 'mean', 'Total Purchase Amount': 'sum'}).reset_index()
            return_vs_revenue['Returns'] = return_vs_revenue['Returns'] * 100
            fig_compare = px.scatter(return_vs_revenue, x='Total Purchase Amount', y='Returns', 
                                 color='Product Category', size='Total Purchase Amount',
                                 title="T·ª∑ l·ªá Ho√†n tr·∫£ so v·ªõi Doanh thu",
                                 labels={'Total Purchase Amount': 'Doanh thu ($)', 'Returns': 'T·ª∑ l·ªá Ho√†n tr·∫£ (%)'},
                                 height=400)
            st.plotly_chart(fig_compare, use_container_width=True, key="chart_return_vs_revenue")  # S·ª≠a fig6 th√†nh fig_compare
            st.write("**G·ª£i √Ω**: Danh m·ª•c c√≥ doanh thu cao nh∆∞ng t·ª∑ l·ªá ho√†n tr·∫£ l·ªõn c·∫ßn c·∫£i thi·ªán ch·∫•t l∆∞·ª£ng s·∫£n ph·∫©m.")

    def generate_pdf():
        buffer = BytesIO()
        c = canvas.Canvas(buffer, pagesize=letter)
        width, height = letter

        # ƒêƒÉng k√Ω font h·ªó tr·ª£ ti·∫øng Vi·ªát
        pdfmetrics.registerFont(TTFont('TimesNewRoman', 'times.ttf'))
        pdfmetrics.registerFont(TTFont('TimesNewRoman-Bold', 'timesbd.ttf'))

        # H√†m ki·ªÉm tra v√† t·∫°o trang m·ªõi n·∫øu c·∫ßn
        def check_page_break(y_position, space_needed):
            if y_position - space_needed < 50:  # Ng∆∞·ª°ng d∆∞·ªõi c√πng c·ªßa trang
                c.showPage()
                return height - 50  # Reset v·ªÅ ƒë·∫ßu trang m·ªõi
            return y_position

        # T√≠nh to√°n tr∆∞·ªõc t·∫•t c·∫£ d·ªØ li·ªáu c·∫ßn thi·∫øt
        total_revenue = filtered_df['Total Purchase Amount'].sum()
        total_revenue = 0 if pd.isna(total_revenue) else total_revenue
        transaction_count = len(filtered_df)
        top_category = filtered_df.groupby('Product Category')['Total Purchase Amount'].sum().idxmax() if not filtered_df.empty else "Kh√¥ng c√≥ d·ªØ li·ªáu"
        revenue_by_category = filtered_df.groupby('Product Category')['Total Purchase Amount'].sum().reset_index()
        top_spenders = filtered_df.groupby('Customer ID')['Total Purchase Amount'].sum().nlargest(5).reset_index()
        avg_spending = customer_segments.groupby('Cluster')['Total Purchase Amount'].mean().reset_index()
        return_rate = filtered_df.groupby('Product Category')['Returns'].mean().reset_index()
        low_transaction_day = filtered_df.groupby('Day of Week')['Customer ID'].count().idxmin()
        future_months = np.arange(len(monthly_revenue), len(monthly_revenue) + 3).reshape(-1, 1)
        future_pred = revenue_model.predict(future_months)

        # Ti√™u ƒë·ªÅ b√°o c√°o
        c.setFillColorRGB(0.18, 0.48, 0.81)
        c.setFont("TimesNewRoman-Bold", 16)
        c.drawString(100, 750, "B√°o c√°o Ph√¢n t√≠ch H√†nh vi Mua s·∫Øm")
        c.setFont("TimesNewRoman", 12)
        c.setFillColorRGB(0, 0, 0)
        c.drawString(100, 730, f"Ng√†y c·∫≠p nh·∫≠t: {pd.Timestamp.now().strftime('%d/%m/%Y')}")
        c.line(100, 720, 500, 720)

        # 1. T·ªïng quan
        y_position = 700
        c.setFont("TimesNewRoman-Bold", 14)
        c.drawString(100, y_position, "1. T·ªïng quan D·ªØ li·ªáu")
        y_position -= 20
        c.setFont("TimesNewRoman", 12)
        c.drawString(100, y_position, f"T·ªïng doanh thu: {total_revenue:,.0f} $")
        y_position -= 20
        c.drawString(100, y_position, f"S·ªë giao d·ªãch: {transaction_count:,}")
        y_position -= 20
        c.drawString(100, y_position, f"Top danh m·ª•c: {top_category}")
        y_position -= 20
        top_payment = filtered_df.groupby('Payment Method')['Total Purchase Amount'].sum().idxmax()
        c.drawString(100, y_position, f"Ph∆∞∆°ng th·ª©c thanh to√°n ph·ªï bi·∫øn: {top_payment}")
        y_position -= 20
        # 2. Ph√¢n t√≠ch Doanh thu theo Danh m·ª•c
        y_position = check_page_break(y_position, 20 + 20 * len(revenue_by_category))
        c.setFont("TimesNewRoman-Bold", 14)
        c.drawString(100, y_position, "2. Doanh thu theo Danh m·ª•c S·∫£n ph·∫©m")
        y_position -= 20
        data = [["Danh m·ª•c", "Doanh thu ($)"]]
        for _, row in revenue_by_category.iterrows():
            data.append([row['Product Category'], f"{row['Total Purchase Amount']:,.0f}"])
    
        table = Table(data)
        table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.lightblue),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.black),
            ('FONTNAME', (0, 0), (-1, -1), 'TimesNewRoman'),
            ('FONTSIZE', (0, 0), (-1, -1), 10),
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
            ('ALIGN', (1, 1), (-1, -1), 'RIGHT'),
        ]))
        table.wrapOn(c, width, height)
        table.drawOn(c, 100, y_position - len(data) * 20)
        y_position -= (len(data) * 20 + 20)

        # 3. Top 5 Kh√°ch h√†ng Chi ti√™u Nhi·ªÅu nh·∫•t
        y_position = check_page_break(y_position, 20 + 20 * 6)  # 6 d√≤ng cho top 5 + header
        c.setFont("TimesNewRoman-Bold", 14)
        c.drawString(100, y_position, "3. Top 5 Kh√°ch h√†ng Chi ti√™u Nhi·ªÅu nh·∫•t")
        y_position -= 20
        data = [["Customer ID", "T·ªïng Chi ti√™u ($)"]]
        for _, row in top_spenders.iterrows():
            data.append([str(row['Customer ID']), f"{row['Total Purchase Amount']:,.0f}"])
    
        table = Table(data)
        table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.lightblue),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.black),
            ('FONTNAME', (0, 0), (-1, -1), 'TimesNewRoman'),
            ('FONTSIZE', (0, 0), (-1, -1), 10),
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
            ('ALIGN', (1, 1), (-1, -1), 'RIGHT'),
        ]))
        table.wrapOn(c, width, height)
        table.drawOn(c, 100, y_position - len(data) * 20)
        y_position -= (len(data) * 20 + 20)

        # 4. Ph√¢n kh√∫c Kh√°ch h√†ng
        y_position = check_page_break(y_position, 20 + 20 * len(avg_spending))
        c.setFont("TimesNewRoman-Bold", 14)
        c.drawString(100, y_position, "4. Ph√¢n kh√∫c Kh√°ch h√†ng")
        y_position -= 20
        data = [["Nh√≥m (Cluster)", "Chi ti√™u Trung b√¨nh ($)"]]
        for _, row in avg_spending.iterrows():
            data.append([str(row['Cluster']), f"{row['Total Purchase Amount']:,.0f}"])
    
        table = Table(data)
        table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.lightblue),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.black),
            ('FONTNAME', (0, 0), (-1, -1), 'TimesNewRoman'),
            ('FONTSIZE', (0, 0), (-1, -1), 10),
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
            ('ALIGN', (1, 1), (-1, -1), 'RIGHT'),
        ]))
        table.wrapOn(c, width, height)
        table.drawOn(c, 100, y_position - len(data) * 20)
        y_position -= (len(data) * 20 + 20)

        # 5. T·ª∑ l·ªá Ho√†n tr·∫£ theo Danh m·ª•c
        y_position = check_page_break(y_position, 20 + 20 * len(return_rate))
        c.setFont("TimesNewRoman-Bold", 14)
        c.drawString(100, y_position, "5. T·ª∑ l·ªá Ho√†n tr·∫£ theo Danh m·ª•c")
        y_position -= 20
        data = [["Danh m·ª•c", "T·ª∑ l·ªá Ho√†n tr·∫£ (%)"]]
        for _, row in return_rate.iterrows():
            data.append([row['Product Category'], f"{row['Returns']:.2f}%"])
    
        table = Table(data)
        table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.lightblue),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.black),
            ('FONTNAME', (0, 0), (-1, -1), 'TimesNewRoman'),
            ('FONTSIZE', (0, 0), (-1, -1), 10),
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
            ('ALIGN', (1, 1), (-1, -1), 'RIGHT'),
        ]))
        table.wrapOn(c, width, height)
        table.drawOn(c, 100, y_position - len(data) * 20)
        y_position -= (len(data) * 20 + 20)

        # 6. G·ª£i √Ω H√†nh ƒë·ªông
        y_position = check_page_break(y_position, 60)
        c.setFont("TimesNewRoman-Bold", 14)
        c.drawString(100, y_position, "6. G·ª£i √Ω H√†nh ƒë·ªông")
        y_position -= 20
        c.setFont("TimesNewRoman", 12)
        c.drawString(100, y_position, f"- TƒÉng khuy·∫øn m√£i v√†o {low_transaction_day} (ng√†y √≠t giao d·ªãch nh·∫•t).")
        y_position -= 20
        c.drawString(100, y_position, f"- T·∫≠p trung qu·∫£ng b√° {top_category} (danh m·ª•c doanh thu cao nh·∫•t).")
        y_position -= 20

        # 7. D·ª± ƒëo√°n Doanh thu
        y_position = check_page_break(y_position, 20 + 20 * 4)  # 4 d√≤ng cho 3 th√°ng + header
        c.setFont("TimesNewRoman-Bold", 14)
        c.drawString(100, y_position, "7. D·ª± ƒëo√°n Doanh thu 3 Th√°ng T·ªõi")
        y_position -= 20
        data = [["Th√°ng", "Doanh thu D·ª± ƒëo√°n ($)"]]
        for i, pred in enumerate(future_pred):
            data.append([f"Th√°ng {i+1}", f"{int(pred):,.0f}"])
    
        table = Table(data)
        table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.lightblue),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.black),
            ('FONTNAME', (0, 0), (-1, -1), 'TimesNewRoman'),
            ('FONTSIZE', (0, 0), (-1, -1), 10),
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
            ('ALIGN', (1, 1), (-1, -1), 'RIGHT'),
        ]))
        table.wrapOn(c, width, height)
        table.drawOn(c, 100, y_position - len(data) * 20)

        # Th√™m ph·∫ßn ph√¢n t√≠ch theo Gi·ªõi t√≠nh
        y_position = check_page_break(y_position, 20 + 20 * len(filtered_df['Gender'].unique()))
        c.setFont("TimesNewRoman-Bold", 14)
        c.drawString(100, y_position, "8. Ph√¢n t√≠ch Theo Gi·ªõi t√≠nh")
        y_position -= 20
        data = [["Gi·ªõi t√≠nh", "Chi ti√™u Trung b√¨nh ($)"]]
        for gender, spending in filtered_df.groupby('Gender')['Total Purchase Amount'].mean().items():
            data.append([gender, f"{spending:,.0f}"])
    
        table = Table(data)
        table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.lightblue),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.black),
            ('FONTNAME', (0, 0), (-1, -1), 'TimesNewRoman'),
            ('FONTSIZE', (0, 0), (-1, -1), 10),
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
            ('ALIGN', (1, 1), (-1, -1), 'RIGHT'),
        ]))
        table.wrapOn(c, width, height)
        table.drawOn(c, 100, y_position - len(data) * 20)
        y_position -= (len(data) * 20 + 20)

        # K·∫øt th√∫c v√† l∆∞u PDF
        c.showPage()
        c.save()
        buffer.seek(0)
        return buffer

    with st.sidebar:
        st.markdown("---")
        if st.button("üì• Xu·∫•t B√°o c√°o PDF", key="export", use_container_width=True):
            pdf_buffer = generate_pdf()
            st.download_button(label="T·∫£i B√°o c√°o PDF", data=pdf_buffer, file_name="purchase_analysis_report.pdf", 
                           mime="application/pdf", use_container_width=True)
            st.success("B√°o c√°o ƒë√£ s·∫µn s√†ng ƒë·ªÉ t·∫£i!", icon="üìÑ")

    # Footer
    st.markdown("""
        <div class="footer">
            <div class="footer-container">
                <div class="footer-column">
                    <h4>StudySystem</h4>
                    <p>Ph√¢n t√≠ch h√†nh vi mua s·∫Øm chuy√™n s√¢u ƒë·ªÉ t·ªëi ∆∞u h√≥a doanh thu v√† tr·∫£i nghi·ªám kh√°ch h√†ng.</p>
                </div>
                <div class="footer-column">
                    <h4>Li√™n k·∫øt nhanh</h4>
                    <a href="https://example.com/about" target="_blank">V·ªÅ ch√∫ng t√¥i</a>
                    <a href="https://example.com/privacy" target="_blank">Ch√≠nh s√°ch b·∫£o m·∫≠t</a>
                    <a href="https://example.com/contact" target="_blank">Li√™n h·ªá</a>
                </div>
                <div class="footer-column">
                    <h4>Li√™n h·ªá</h4>
                    <p>Email: <a href="mailto:contact@ktdl9team.com">contact@ktdl9team.com</a></p>
                    <p>Hotline: +84 123 456 789</p>
                    <div class="social-icons">
                        <a href="https://facebook.com" target="_blank"><i class="fab fa-facebook-f"></i></a>
                        <a href="https://twitter.com" target="_blank"><i class="fab fa-twitter"></i></a>
                        <a href="https://linkedin.com" target="_blank"><i class="fab fa-linkedin-in"></i></a>
                    </div>
                </div>
            </div>
            <div class="footer-bottom">
                <p>¬© 2025 - Ph√°t tri·ªÉn b·ªüi KTDL-9 Team. All rights reserved.</p>
            </div>
        </div>
    """, unsafe_allow_html=True)
elif st.session_state.get('authentication_status') is False:
    st.error("T√™n ng∆∞·ªùi d√πng ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!")
elif st.session_state.get('authentication_status') is None:
    st.warning("Vui l√≤ng nh·∫≠p t√™n ng∆∞·ªùi d√πng v√† m·∫≠t kh·∫©u.")